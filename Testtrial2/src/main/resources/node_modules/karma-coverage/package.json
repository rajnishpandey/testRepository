{
  "name": "karma-coverage",
  "version": "0.3.1",
  "description": "A Karma plugin. Generate code coverage.",
  "main": "lib/index.js",
  "scripts": {
    "test": "grunt test"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/karma-runner/karma-coverage.git"
  },
  "keywords": [
    "karma-plugin",
    "karma-preprocessor",
    "karma-reporter",
    "coverage",
    "istanbul"
  ],
  "author": {
    "name": "SATO taichi",
    "email": "ryushi@gmail.com"
  },
  "dependencies": {
    "istanbul": "~0.3.0",
    "dateformat": "~1.0.6",
    "minimatch": "~0.3.0"
  },
  "peerDependencies": {
    "karma": ">=0.9"
  },
  "license": "MIT",
  "devDependencies": {
    "chai": "~1.7.2",
    "grunt": "~0.4.1",
    "grunt-auto-release": "~0.0.1",
    "grunt-bump": "~0.0.7",
    "grunt-contrib-jshint": "~0.6.0",
    "grunt-npm": "~0.0.2",
    "grunt-simple-mocha": "~0.4.0",
    "karma": "~0.12.0",
    "lodash": "^2.4.1",
    "mocks": "0.0.11",
    "sinon": "~1.7.3",
    "sinon-chai": "~2.4.0"
  },
  "contributors": [
    {
      "name": "Friedel Ziegelmayer",
      "email": "friedel.ziegelmayer@gmail.com"
    },
    {
      "name": "Allen Bierbaum",
      "email": "abierbaum@gmail.com"
    },
    {
      "name": "Ron Derksen",
      "email": "ron.derksen@informaat.nl"
    },
    {
      "name": "Julie",
      "email": "ju.ralph@gmail.com"
    },
    {
      "name": "Friedel Ziegelmayer",
      "email": "dignifiedquire@gmail.com"
    },
    {
      "name": "Petar Manev",
      "email": "petar.manev2010@gmail.com"
    }
  ],
  "readme": "# karma-coverage [![Build Status](https://travis-ci.org/karma-runner/karma-coverage.svg?branch=master)](https://travis-ci.org/karma-runner/karma-coverage)\n\n> Generate code coverage using [Istanbul].\n\n## Installation\n\nThe easiest way is to keep `karma-coverage` as a devDependency in your `package.json`.\n```json\n{\n  \"devDependencies\": {\n    \"karma\": \"~0.10\",\n    \"karma-coverage\": \"~0.1\"\n  }\n}\n```\n\nYou can simple do it by:\n```bash\nnpm install karma-coverage --save-dev\n```\n\n## Configuration\n\nThe following code shows a simple usage:\n\n```javascript\n// karma.conf.js\nmodule.exports = function(config) {\n  config.set({\n    files: [\n      'src/**/*.js',\n      'test/**/*.js'\n    ],\n\n    // coverage reporter generates the coverage\n    reporters: ['progress', 'coverage'],\n\n    preprocessors: {\n      // source files, that you wanna generate coverage for\n      // do not include tests or libraries\n      // (these files will be instrumented by Istanbul)\n      'src/**/*.js': ['coverage']\n    },\n\n    // optionally, configure the reporter\n    coverageReporter: {\n      type : 'html',\n      dir : 'coverage/'\n    }\n  });\n};\n```\n\nExample use with a CoffeeScript project:\n\n```javascript\n// karma.conf.js\nmodule.exports = function(config) {\n  config.set({\n    files: [\n      'src/**/*.coffee',\n      'test/**/*.coffee'\n    ],\n\n    // coverage reporter generates the coverage\n    reporters: ['progress', 'coverage'],\n\n    preprocessors: {\n      // source files, that you wanna generate coverage for\n      // do not include tests or libraries\n      // (these files will be instrumented by Istanbul via Ibrik unless\n      // specified otherwise in coverageReporter.instrumenter)\n      'src/**/*.coffee': ['coverage'],\n\n      // note: project files will already be converted to\n      // JavaScript via coverage preprocessor.\n      // Thus, you'll have to limit the CoffeeScript preprocessor\n      // to uncovered files.\n      'test/**/*.coffee': ['coffee']\n    },\n\n    // optionally, configure the reporter\n    coverageReporter: {\n      type : 'html',\n      dir : 'coverage/'\n    }\n  });\n};\n```\n\nHere is an advanced usage of karma-coverage, using severals reporters:\n\n```javascript\n// karma.conf.js\nmodule.exports = function(config) {\n  config.set({\n    files: [\n      'src/**/*.js',\n      'test/**/*.js'\n    ],\n    reporters: ['progress', 'coverage'],\n    preprocessors: {\n      'src/**/*.js': ['coverage']\n    },\n    coverageReporter: {\n      // specify a common output directory\n      dir: 'build/reports/coverage',\n      reporters: [\n        // reporters not supporting the `file` property\n        { type: 'html', subdir: 'report-html' },\n        { type: 'lcov', subdir: 'report-lcov' },\n        // reporters supporting the `file` property, use `subdir` to directly\n        // output them in the `dir` directory\n        { type: 'cobertura', subdir: '.', file: 'cobertura.txt' },\n        { type: 'lcovonly', subdir: '.', file: 'report-lcovonly.txt' },\n        { type: 'teamcity', subdir: '.', file: 'teamcity.txt' },\n        { type: 'text', subdir: '.', file: 'text.txt' },\n        { type: 'text-summary', subdir: '.', file: 'text-summary.txt' },\n      ]\n    }\n  });\n});\n```\n\n### Options\n#### type\n**Type:** String\n\n**Description:** Specify a reporter type.\n\n**Possible Values:**\n  * `html` (default)\n  * `lcov` (lcov and html)\n  * `lcovonly`\n  * `text`\n  * `text-summary`\n  * `cobertura` (xml format supported by Jenkins)\n  * `teamcity` (code coverage System Messages for TeamCity)\n  * `json` (json format supported by [`grunt-istanbul-coverage`](https://github.com/daniellmb/grunt-istanbul-coverage))\n\n#### dir\n**Type:** String\n\n**Description:** This will be used to output coverage reports. When\n  you set a relative path, the directory is resolved against the `basePath`.\n\n#### subdir\n**Type:** String\n\n**Description**: This will be used in complement of the `coverageReporter.dir`\noption to generate the full output directory path. By default, the output\ndirectory is set to `./config.dir/BROWSER_NAME/`, this option allows you to\ncustom the second part. You can either pass a `string` or a `function` which will be\ncalled with the browser name passed as the only argument.\n\n```javascript\ncoverageReporter: {\n  dir: 'coverage',\n  subdir: '.'\n  // Would output the results into: .'/coverage/'\n}\n```\n\n```javascript\ncoverageReporter: {\n  dir: 'coverage',\n  subdir: 'report'\n  // Would output the results into: .'/coverage/report/'\n}\n```\n\n```javascript\ncoverageReporter: {\n  dir: 'coverage',\n  subdir: function(browser) {\n    // normalization process to keep a consistent browser name accross different\n    // OS\n    return browser.toLowerCase().split(/[ /-]/)[0];\n  }\n  // Would output the results into: './coverage/firefox/'\n}\n```\n\n#### file\n\nIf you choose the `cobertura`, `lcovonly`, `teamcity`, `text` or `text-summary` reporters, you may set the `file` option to specify an output file.\n\n```javascript\ncoverageReporter: {\n  type : 'text',\n  dir : 'coverage/',\n  file : 'coverage.txt'\n}\n```\n\n#### watermarks\n**Type:** Object\n\n**Description:** This will be used to set the coverage threshold colors. The first number is the threshold between Red and Yellow. The second number is the threshold between Yellow and Green.\n\n```javascript\ncoverageReporter: {\n  watermarks: {\n    statements: [ 50, 75 ],\n    functions: [ 50, 75 ],\n    branches: [ 50, 75 ],\n    lines: [ 50, 75 ]\n  }\n}\n```\n\n#### includeAllSources\n**Type:** Boolean\n\nYou can opt to include all sources files, as indicated by the coverage preprocessor, in your code coverage data, even if there are no tests covering them. (Default `false`)\n\n```javascript\ncoverageReporter: {\n  type : 'text',\n  dir : 'coverage/',\n  file : 'coverage.txt',\n  includeAllSources: true\n}\n```\n\n#### multiple reporters\nYou can use multiple reporters, by providing array of options.\n\n```javascript\ncoverageReporter: {\n  reporters:[\n    {type: 'html', dir:'coverage/'},\n    {type: 'teamcity'},\n    {type: 'text-summary'}\n  ],\n}\n```\n\n#### instrumenter\nKarma-coverage can infers the instrumenter regarding of the file extension.\n  It is possible to override this behavior and point out an\n  instrumenter for the files matching a specific pattern.\n  To do so, you need to declare an object under with the keys represents the\n  pattern to match, and the instrumenter to apply. The matching will be done\n  using [minimatch](https://github.com/isaacs/minimatch).\n  If two patterns match, the last one will take the precedence.\n\nFor example you can use [Ibrik](https://github.com/Constellation/ibrik) (an\n  [Istanbul](https://github.com/gotwarlost/istanbul) analog for\n  CoffeeScript files) with:\n\n```javascript\ncoverageReporter: {\n  instrumenters: { ibrik : require('ibrik') }\n  instrumenter: {\n    '**/*.coffee': 'ibrik'\n  },\n  // ...\n}\n```\n\nYou can pass options additional options to specific instrumenter with:\n\n```javascript\nvar to5Options = { experimental: true };\n\n// [...]\n\ncoverageReporter: {\n  instrumenters: { isparta : require('isparta') },\n  instrumenter: {\n    '**/*.js': 'isparta'\n  },\n  instrumenterOptions: {\n    isparta: { to5 : to5Options }\n  }\n}\n```\n\n\n----\n\nFor more information on Karma see the [homepage].\n\n\n[homepage]: http://karma-runner.github.com\n[Istanbul]: https://github.com/yahoo/istanbul\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/karma-runner/karma-coverage/issues"
  },
  "homepage": "https://github.com/karma-runner/karma-coverage",
  "_id": "karma-coverage@0.3.1",
  "dist": {
    "shasum": "5b56308a1e9a99acfaba258d9babf56c075b51fc"
  },
  "_from": "karma-coverage@^0.3.1",
  "_resolved": "https://registry.npmjs.org/karma-coverage/-/karma-coverage-0.3.1.tgz"
}
